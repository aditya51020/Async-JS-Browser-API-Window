
The `localStorage` and `sessionStorage` APIs are part of the Web Storage API, which provides mechanisms for storing key-value pairs directly in the user's browser. These APIs are used in web development to store data locally on the client side, enabling faster access to data and enhancing the user experience by reducing the need to fetch data from a server repeatedly.

### Purpose and Usage of `localStorage`:

`localStorage` is used to store data in the browser that persists even after the browser is closed and reopened. Data stored in `localStorage` has no expiration time, meaning it remains available until explicitly deleted by the user or through code. This makes it ideal for storing data that needs to be available across sessions, such as user preferences, settings, or long-term data caching.

Example of `localStorage` Usage:

Suppose you have a web application where users can select their preferred theme (light or dark mode). You want the theme preference to be saved so that it remains the same even when the user revisits the site after closing the browser.

```javascript

function saveThemePreference(theme) {
    localStorage.setItem('theme', theme);
}

function applyThemePreference() {
    const theme = localStorage.getItem('theme');
    if (theme) {
        document.body.className = theme;
    }
}

// Example usage
saveThemePreference('dark-mode'); 
applyThemePreference();  
```

In this example, the user's theme preference is saved in `localStorage` under the key `"theme"`. When the user returns to the site, the saved theme is applied, ensuring a consistent experience.

### Purpose and Usage of `sessionStorage`:

`sessionStorage`, on the other hand, is used to store data that is only needed for the duration of the page session. Data stored in `sessionStorage` is cleared when the page session ends, which occurs when the user closes the browser tab or window. This makes `sessionStorage` suitable for storing temporary data, such as form inputs, session-specific settings, or transient states that do not need to persist across browser sessions.

Example of `sessionStorage` Usage:

Imagine you have a multi-step form in a web application. You want to temporarily store the user's input at each step so that if they navigate between steps, the input is not lost. However, this data is only relevant for the current session and should not be stored once the session ends.

```javascript

function saveFormData(step, data) {
    sessionStorage.setItem(`formStep${step}`, JSON.stringify(data));
}


function getFormData(step) {
    const data = sessionStorage.getItem(`formStep${step}`);
    return data ? JSON.parse(data) : {};
}

// Example usage
saveFormData(1, { name: 'John', email: 'john@example.com' });  
const step1Data = getFormData(1);  
console.log(step1Data.name);  
```

